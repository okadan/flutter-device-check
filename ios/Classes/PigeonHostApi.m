// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "PigeonHostApi.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}


@interface PigeonHostApiCodecReader : FlutterStandardReader
@end
@implementation PigeonHostApiCodecReader
@end

@interface PigeonHostApiCodecWriter : FlutterStandardWriter
@end
@implementation PigeonHostApiCodecWriter
@end

@interface PigeonHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PigeonHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PigeonHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PigeonHostApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PigeonHostApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    PigeonHostApiCodecReaderWriter *readerWriter = [[PigeonHostApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void PigeonHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PigeonHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonHostApi.deviceCheckIsSupported"
        binaryMessenger:binaryMessenger
        codec:PigeonHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deviceCheckIsSupportedWithError:)], @"PigeonHostApi api (%@) doesn't respond to @selector(deviceCheckIsSupportedWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api deviceCheckIsSupportedWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonHostApi.deviceCheckGenerateToken"
        binaryMessenger:binaryMessenger
        codec:PigeonHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(deviceCheckGenerateTokenWithCompletion:)], @"PigeonHostApi api (%@) doesn't respond to @selector(deviceCheckGenerateTokenWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api deviceCheckGenerateTokenWithCompletion:^(FlutterStandardTypedData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonHostApi.appAttestServiceIsSupported"
        binaryMessenger:binaryMessenger
        codec:PigeonHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appAttestServiceIsSupportedWithError:)], @"PigeonHostApi api (%@) doesn't respond to @selector(appAttestServiceIsSupportedWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api appAttestServiceIsSupportedWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonHostApi.appAttestServiceGenerateKey"
        binaryMessenger:binaryMessenger
        codec:PigeonHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appAttestServiceGenerateKeyWithCompletion:)], @"PigeonHostApi api (%@) doesn't respond to @selector(appAttestServiceGenerateKeyWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api appAttestServiceGenerateKeyWithCompletion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonHostApi.appAttestServiceAttestKey"
        binaryMessenger:binaryMessenger
        codec:PigeonHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appAttestServiceAttestKeyKeyId:clientDataHash:completion:)], @"PigeonHostApi api (%@) doesn't respond to @selector(appAttestServiceAttestKeyKeyId:clientDataHash:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_keyId = args[0];
        FlutterStandardTypedData *arg_clientDataHash = args[1];
        [api appAttestServiceAttestKeyKeyId:arg_keyId clientDataHash:arg_clientDataHash completion:^(FlutterStandardTypedData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.PigeonHostApi.appAttestServiceGenerateAssertion"
        binaryMessenger:binaryMessenger
        codec:PigeonHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appAttestServiceGenerateAssertionKeyId:clientDataHash:completion:)], @"PigeonHostApi api (%@) doesn't respond to @selector(appAttestServiceGenerateAssertionKeyId:clientDataHash:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_keyId = args[0];
        FlutterStandardTypedData *arg_clientDataHash = args[1];
        [api appAttestServiceGenerateAssertionKeyId:arg_keyId clientDataHash:arg_clientDataHash completion:^(FlutterStandardTypedData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
